% Machine Learning Code Practice

clearvars 
outputfolder = uigetdir('C:\Users\Owner\OneDrive\Desktop\Stoll Fellowship Code\','Where would you like to store the converted data?');% Enter output folder
prompt = 'What name handle would you like to use? (s(number).mat will be added automatically)\\n (enter inside single quotes)\\n';
dlgtitle = 'Name Handle';
dims = [1 40];
outputname = inputdlg(prompt, dlgtitle, dims);

prompt = {' What experiment would you like to process? '}; % Enter ExpID
dlgtitle = 'Select Experiment';
dims = [1 40];
ExpID_ = string(inputdlg(prompt, dlgtitle, dims));

Invasion_A_folder = strcat('C:\Users\Owner\OneDrive\Desktop\Stoll Fellowship Code\', ExpID_,'_outputfolder_invasions');
filenames_A = dir(fullfile(Invasion_A_folder,'*amoeboid_table_all_stats.mat')); 
total_num_A = numel(filenames_A);

Invasion_M_folder = strcat('C:\Users\Owner\OneDrive\Desktop\Stoll Fellowship Code\', ExpID_,'_outputfolder_invasions');
filenames_M = dir(fullfile(Invasion_M_folder,'*mesenchymal_table_all_stats.mat')); 
total_num_M = numel(filenames_M);


% loop to delete column which holds the amoeboid index
for p = 1: total_num_A
    table_A = load(fullfile(Invasion_A_folder, filenames_A(p).name));
    table_A = struct2table(table_A);
    stats_A_invasion_table_new = table_A.stats_A_invasion_table; %holds data to concatenate
    
    if p == 1
    stats_A_invasion_table_first = removevars(stats_A_invasion_table_new, {'amoeboid_index', 'Centroid', 'BoundingBox', 'SubarrayIdx','ConvexHull','ConvexImage', 'Image','FilledImage','Extrema', 'PixelIdxList','PixelList','MinFeretCoordinates', 'MaxFeretCoordinates'});
    stats_A_invasion_table_current = stats_A_invasion_table_first;
    end
    
    if p == 2
       stats_A_invasion_table_new = removevars(stats_A_invasion_table_new, {'amoeboid_index', 'Centroid', 'BoundingBox', 'SubarrayIdx','ConvexHull','ConvexImage', 'Image','FilledImage','Extrema', 'PixelIdxList','PixelList','MinFeretCoordinates', 'MaxFeretCoordinates'});
       stats_A_invasion_table_current = vertcat(stats_A_invasion_table_new, stats_A_invasion_table_first);
    end 
    
    if p > 2
       stats_A_invasion_table_new = removevars(stats_A_invasion_table_new, {'amoeboid_index', 'Centroid', 'BoundingBox', 'SubarrayIdx','ConvexHull','ConvexImage', 'Image','FilledImage','Extrema', 'PixelIdxList','PixelList','MinFeretCoordinates', 'MaxFeretCoordinates'}); 
       stats_A_invasion_table_current = vertcat(stats_A_invasion_table_current, stats_A_invasion_table_new);
    end
    
    if total_num_A == 1
        stats_A_invasion_table = stats_A_invasion_table_classify;
    end 
end

for e = 1: total_num_M
    table_M = load(fullfile(Invasion_M_folder, filenames_M(e).name));
    table_M = struct2table(table_M);
    stats_M_invasion_table_new = table_M.stats_M_invasion_table;
    
    if e == 1
    stats_M_invasion_table_first = removevars(stats_M_invasion_table_new, {'mesenchymal_index', 'Centroid', 'BoundingBox','SubarrayIdx','ConvexHull','ConvexImage', 'Image','FilledImage','Extrema', 'PixelIdxList','PixelList', 'MinFeretCoordinates', 'MaxFeretCoordinates'});
    end
    
    if e == 2
       stats_M_invasion_table_new = removevars(stats_M_invasion_table_new, {'mesenchymal_index', 'Centroid', 'BoundingBox', 'SubarrayIdx', 'ConvexHull', 'ConvexImage', 'Image', 'FilledImage', 'Extrema', 'PixelIdxList','PixelList', 'MinFeretCoordinates', 'MaxFeretCoordinates'});
       stats_M_invasion_table_current = vertcat(stats_M_invasion_table_new, stats_M_invasion_table_first);
    end 
    
    if e > 2
        stats_M_invasion_table_current = vertcat(stats_M_invasion_table_current, stats_M_invasion_table_new);
    end
    
    if total_num_M == 1
        stats_M_invasion_table = stats_M_invasion_table_classify;
    end 
end 

individual_invasion_table = vertcat(stats_A_invasion_table_current, stats_M_invasion_table_current);
individual_invasion_table_train = individual_invasion_table(5:9,:);
individual_invasion_table_test = removevars(individual_invasion_table, {'Classification'});
individual_invasion_table_testdata = individual_invasion_table_test(1:4,:);

knnmodel = fitcknn(individual_invasion_table_train, "Classification"); % uses a k = 1 as default,
%meaning it will use the nearest neighbor to perfom classification. By
%increasing k, you can make model less sensitive to outliers. Can do that
%with NumNeighbor
predictions = predict(knnmodel, individual_invasion_table_testdata); % will use model to fit the data
iscorrect = predictions == individual_invasion_table(1:4,:).Classification; % used to evaluate accuracy of model
accuracy = sum(iscorrect)/(numel(predictions)); % how many were actually correct
iswrong = predictions ~= individual_invasion_table(1:4,:).Classification ; 
misclassrate = sum(iswrong)/numel(predictions);
